//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFClient.HTTP {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="HTTP.ICalculate")]
    public interface ICalculate {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculate/Add", ReplyAction="http://tempuri.org/ICalculate/AddResponse")]
        double Add(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculate/Add", ReplyAction="http://tempuri.org/ICalculate/AddResponse")]
        System.Threading.Tasks.Task<double> AddAsync(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculate/Subtract", ReplyAction="http://tempuri.org/ICalculate/SubtractResponse")]
        double Subtract(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculate/Subtract", ReplyAction="http://tempuri.org/ICalculate/SubtractResponse")]
        System.Threading.Tasks.Task<double> SubtractAsync(double number1, double number2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculate/GetMessage", ReplyAction="http://tempuri.org/ICalculate/GetMessageResponse")]
        string GetMessage(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculate/GetMessage", ReplyAction="http://tempuri.org/ICalculate/GetMessageResponse")]
        System.Threading.Tasks.Task<string> GetMessageAsync(string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculateChannel : WCFClient.HTTP.ICalculate, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculateClient : System.ServiceModel.ClientBase<WCFClient.HTTP.ICalculate>, WCFClient.HTTP.ICalculate {
        
        public CalculateClient() {
        }
        
        public CalculateClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculateClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculateClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculateClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Add(double number1, double number2) {
            return base.Channel.Add(number1, number2);
        }
        
        public System.Threading.Tasks.Task<double> AddAsync(double number1, double number2) {
            return base.Channel.AddAsync(number1, number2);
        }
        
        public double Subtract(double number1, double number2) {
            return base.Channel.Subtract(number1, number2);
        }
        
        public System.Threading.Tasks.Task<double> SubtractAsync(double number1, double number2) {
            return base.Channel.SubtractAsync(number1, number2);
        }
        
        public string GetMessage(string message) {
            return base.Channel.GetMessage(message);
        }
        
        public System.Threading.Tasks.Task<string> GetMessageAsync(string message) {
            return base.Channel.GetMessageAsync(message);
        }
    }
}
